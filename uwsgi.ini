[uwsgi]

uid = root
gid = root
# 设置工作目录
chdir = %d

# 设置虚拟环境的路径
virtualenv = /root/.virtualenvs/flask-vue-robots

# wsgi文件位置，只要有module，会优先查找这里，如果没配置或者配置错误，会查询wsgi-file+callable
# 推荐配置module
module = wsgi:app

# 默认flask的实例名
callable = app

;指定wsgi文件
wsgi-file = wsgi.py


# 以下uwsgi与nginx通信手段3选一即可
# 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
# Nginx配置中uwsgi_pass应指向同一socket文件
;socket = /var/run/%n.sock

# 选项2，使用TCP socket与nginx通信
# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
# socket=0.0.0.0:8000 或则 socket=:8000
#socket权限设置
;chmod-socket = 755

# 选项3，使用http协议与nginx通信
# Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
# http=0.0.0.0:8000

# 以下三者任选其一
;http=0.0.0.0:5000  # 如果直接暴露 uwsgi 的话用这个
;http-socket=0.0.0.0:5001  # 如果用 nginx 反向代理的话，用这个
;socket=:3031  # 在 3031 使用 uwsgi 协议，nginx 中使用 uwsgi_pass 更高效

;直接做web服务器使用
http = 0.0.0.0:5000

# 可以使用 uwsgitop 监控
# 通过pip install uwsgitop 127.0.0.1:9191可以查看uwsgi的状态
stats = 127.0.0.1:9191


# 指定启动的工作进程数
processes = %k

;启动线程，这个是允许你的代码里面有多线程
enable-threads = true

# 指定工作进程中的线程数，开启协程后，必须关闭线程，线程和协程是互斥的，但是代码可以多线程
;threads = 10

# 结束后自动释放pid资源
master = true

# 防止惊群导致cpu过高，master唤醒work的accept()的时候，串行化。否则可能唤醒N个work。但是只有一个work干活
thunder-lock = true

# 保存启动之后主进程的pid
pidfile = /var/run/%n.pid

# 以后台守护进程运行，并将log日志存于temp文件夹。
daemonize = /var/log/uwsgi/%n-master.log

# 使用 systemd、docker 等时的 日志文件
logto = /var/log/uwsgi.loglog

#设置最大日志文件大小kb
log-maxsize = 5000000

#true禁用请求日志记录，纸打印错误日志
;disable-logging = true



# 服务停止时，自动移除unix socket和pid文件
vacuum = true

# 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。
max-requests = 5000

# 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃。
harakiri = 60

#当一个请求被harakiri杀掉会输出一条日志
harakiri-verbose = true

# uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size = 65536

# 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering = 65536

#开启内存使用情况报告，在日志记录体现
memory-report = true

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy = 10

#设置工作进程使用虚拟内存超过多少MB就回收重启
reload-on-as = 1024

# 如果是false，那么核心app会在master进程重被加载，然后worker去fork(), 会导致并发问题
# 配置true，每个worker都会实例化app。占用内存，但是并发无问题
lazy-apps = true

#设置socket的监听队列大小（默认：100）
listen = 120

# python 文件修改后自动重启 开发神器
# py-autoreload = 1

# 限制每个uWSGI进程的虚拟内存使用数。这个配置会限制uWSGI的进程占用虚拟内存不超过256M。
# 如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误（当产生内存错误时，可能是内存使用数设置不足）
limit-as = 512

#支持下websocket
http-websockets = True

# 开启协程后，必须关闭线程，线程和协程是互斥的
# 1000个协程
gevent = 1000

# 30个异步任务
async = 30

# 静态文件 uwsgi 自己处理（推荐使用 nginx）
static-map = /static=/home/ducker/workbench/projects/flask-vue-robots/static

# https://www.bookstack.cn/read/uwsgi-docs-2.0-zh/dc68185b01b18c27.md

# 高阶配置 apache风格
# log-format = %(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"
